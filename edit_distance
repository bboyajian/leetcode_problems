Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You have the following three operations permitted on a word: Insert a character, Delete a character, or Replace a character

class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        m = len(word1)
        n = len(word2)
        dist = []
        for i in range(m+1):
            dist.append([0]*(n+1))
        # let dist[i][j] = distance between word1[:i] and word2[:j]
        # then the solution is dist[m][n]
        dist[0] = [i for i in range(n+1)]
        for i in range(1, m+1):
            dist[i][0] = i
        for i in range(1, m+1):
            for j in range(1, n+1):
                if word1[i-1] == word2[j-1]:
                    dist[i][j] = dist[i-1][j-1]
                else:
                    dist[i][j] = min(dist[i-1][j-1], dist[i-1][j], dist[i][j-1]) + 1
        return dist[-1][-1]
